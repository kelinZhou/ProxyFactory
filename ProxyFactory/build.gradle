apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

group = 'com.github.kelinZhou'

android {
    compileSdk 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
    namespace 'com.kelin.proxyfactory'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'com.github.kelinZhou:Logger:1.0.1'

    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    //ApiException
    api 'com.github.kelinZhou:ApiException:1.2.0'
}


repositories {
    mavenCentral()
}


// 指定编码
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}
//
//// 打包源码
//tasks.register('sourcesJar', Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//tasks.register('javadoc', Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
//}
//
//// 制作文档(Javadoc)
//tasks.register('javadocJar', Jar) {
//    dependsOn javadoc
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}
//
//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}